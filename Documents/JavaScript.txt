_________________________________________________
To Display Content
_________________________________________________

* consol.log() : To Display Content in COnsole of Browser  => console.log("Message" + varname);
* alert ()     : To Display alert  => alert("Message" + varname);
* prompt()     : To Display prompt with => prompt("Message"+varname); entered value is return to store var varname2 = prompt("Message"+varname);
* Others are we can paur data in html and can show modal popup but these are using html and css only

_________________________________________________
DataTypes
_________________________________________________

* Numeric
* String
* Boolean
* Undefined
* Null

* But Not Need to care as in javascript we declare variable by   var varname = value and based on value it automatically decide the DataTypes.
* If Just variable is declared then type is undefined and value is null.

* var => Decalre Globbally and Not Depends on sequence means
    ->  x=9;
        console.log(x);
        var x;
        /*/*/*/*/*
        Output: 9
    
    -> {var x=2;}consol.log(x); //output: 2

* let : Decalre Locally and declartaion Must Before Useful

    ->x=9;console.log(x);let x   // Output: error (Uncought Ref)   => Solution let x;x=9;console.log(x)
    ->{let x=2;}console.log(x)   // Output: error (Uncought Ref)   => let x=5; {let x=2;} console.log(x);

* const : Smae as let but just one dif is by this if any var is decalre then it become const so after assign can not change val & also have to define value. 
* Can Create Object & functionexpression using any var / let / const


_________________________________________________
Array
_________________________________________________

* var array_name = [para1,para2, ......]   or var array_name =  new Array(para1,para2, ......);
* Can access by index like array_name[0] / array_name[n] ...........
* push() and unshift() methods are there to add the elements 
    * push() : To Add the element in last position => Returns length of array.
    * unshift() : To Add the in first position and other element are shift not deleted.=> Returns length of array.

* pop() and shift() methods to deleted element/
    * pop() : To Remove element from last index.=> Returns poped element of array.
    * shift(): To Remove element from first and other element are shift by one. =>Returns poped element of array.

* Can Add element at any index as can access index and if in between elements are not present then it show empty values.


_________________________________________________
Function
_________________________________________________

* Function have name and it may return it may not

    function <fun_name> (may paras)
    {
        defination
        //if thenreturning then return statement
    }

* Function Expression and statement

    var <para_name> = function (may paras)
    {
        defination
        //if thenreturning then return statement, generally return because otherwise no mean and variable is when access then value is undefined
    }
    
_________________________________________________
Type Coercion
_________________________________________________

* Using Console Can Print Multiple elements of DataTypes.
* because of Type Coercion for compare strily using '===' not "==" 


_________________________________________________
Type Mutation
_________________________________________________

* After declare and define value can assign other type of value
ex:
   var varname=<Numeric_value>;
   varname=<string_value>
   varname=<bool_value>


_________________________________________________
Working Of javascript
_________________________________________________
 
* First it parsed by parser and generating a syntax tree and if error is then throws an error.
* Otherwise generally machine understandable code (Machine code) and then give to machine and then machine execute that.
* The container of code is known as execution context.
* One Global Context is there which store variable or function which is not in any function.
* There are mainly Two Phases are there
    
    1. Creation => Variable Object(Hoisting) , Scoping and Scoping Chain , this
    --------------    
        a.Varibale Object(Hoisting): 
          - In this all the function which are pointed or declared are scan one by one.
          - Also all the variables are set to undefined as it is creating variables for the first time.
        
        b.Scoping and Chain: 
          - In this scope of variable is assign, function can acess global variables + its own variables.
          - If function is nested then it can also acess parent variables too. 
         
        c.this: 
          - this is pointer which stores the current object, by default it stores the window object also if any function is invoked then also this have address of window object.
          - But if Method of any object is called / invoked then in that vase this store that object.
    
    Note: Because of Hoisting before declared function we can call that but can not call the function expression. 
    
    2. Execution => Simple Execution by Machine
    -------------

_________________________________________________
Object
_________________________________________________

* To Create Object we have below methods;

    1. var <object1_name> = 
        {
            <prop1>:<value_of_prop1>,
            <prop2>:<value_of_prop2>,
            .
            .
            <method1_name>:function (){...}
            .
            .
        };

    2. var <object2_name> = new Object();
        <object_name>.<prop1_name>=<prop1_value>;
        .
        .
        <object_name>.<method1_name>=function () {...};

    3.      var <object3_name> = Object.create(<object_name>);then assign value manually  
        or  var <object3_name> = Object.create(<object_name>,{prop1:{value:prop1_val1},...}); 
        here <object_name> can be from previos created object like object1_name or object2_name;
        It inheriting form object prototype which is created Previously.
    
    4. var Parent = function (prop1_val1,prop2_val2){this.prop1=prop1_val1;this.prop2=prop2_val2};   //Constructor
        var child = new Parent();
        It inheriting using constructur defined property.
        Parent.prototype.<prop/method_name>=value;


* We can Change Values of any property at any moment of time.
* Can Add Property any moment of time like
 
    object1_name.<prop_name>=value;


* To Acess Values 

    1. object_name.prop_name   or   object_name.method_name()
    2. object_name[<prop_name>].
    3. var <var_name>="prop_name" => object_name[<var_name>]


* Also if we write this.<propname>=value then in that case add the prop in window object.(if bot inside any object's method).
* And After learning we can say that array is also object.


_________________________________________________
How to Interact With HTML using Just
_________________________________________________

* Basically DOM came in picture in this module => DOM :Document Object Model
* Whole HTML is in different segments and block of docuemnt.
* Document is like object and its segments or elements are like member we can fetch by id or class.
* How to access element of docuemnt :
    -> docuemnt.querySelector(<id or class>) / querySelectorAll(<class>)[index] => it brings particular element by id or class like css (Which is first in case of multiple).
        
        a.     querySelector().textContent = <content>          (Setter Method, To set text not value).
            or var valueElemnt=querySelector().textContent      (Getter Method, To get text not value).

        b.  querySelector().value = <content>                   (Setter Method, To set value not text).
            or var valueElemnt=querySelector().value            (Getter Method, To get value not text).

        c.    querySelector().innerHTML="....."                 (To Set or get text only not value).

    Note : Here In case of textContent we can pass any type of value but as a plain text only (In That Case if css / html returns then not apply to content)
           Whereas In case of innerHtml we can pass string only and as html text (whatever html and css in written that will execute).

        c. querySelector().style.<css prop>=value or querySelector().<attribute>=value

* Can add Eventlistner 
    docuemnt.querySelector().addEventListner(<event_name>,<fun_name>);


_________________________________________________
First CLass Function
_________________________________________________

* We can also pass function as an argument to onother function 
    ex:
        function arrayOfAge(array,fun)
        {
            var array;
            .....
            ..
            array.push(fun(this.year));
        }
        function calcAge(val)
        {
            return currentyear(2021)-val;
        }
        arrayOfAge(array,calcAge);

_________________________________________________
Diff Between Premetive Data Types and Objects
_________________________________________________

* Premetive Data TYpe Store value Directly.
* Object store the address or ref where actual value is stored.
* Useful:
    var a=0;                                var obj1={a:0,b:0};
    var b=a;                                var obj2=obj1;
    a=50;                                   obj1.a=50;
    console.log(a+","+b); => 50,0           console.log(obj1.a+","+obj1.b+"\t"obj1.a+","+obj1.b); =>  50,0    50,0